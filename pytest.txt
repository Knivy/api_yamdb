============================= test session starts =============================
platform win32 -- Python 3.9.0, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- f:\Python\_Dev\api_yamdb\.venv\Scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: F:\Python\_Dev\api_yamdb\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: pythonpath-0.7.3, django-4.4.0
collecting ... collected 80 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  2%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0] PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data1-messege1] PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2] PASSED [  6%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  8%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0] PASSED [ 10%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1] PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2] PASSED [ 12%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3] PASSED [ 13%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4] PASSED [ 15%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [ 16%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 17%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 18%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user FAILED [ 20%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin FAILED [ 21%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 23%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 25%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 26%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 27%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-] PASSED [ 31%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указани€ роли нового пользовател€ ] PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 36%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 38%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 40%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_not_allowed PASSED [ 42%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 46%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_me_get FAILED       [ 48%]
tests/test_01_users.py::Test01UserAPI::test_09_02_users_me_delete_not_allowed FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_10_01_users_me_patch FAILED  [ 51%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data0-messege0] FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data1-messege1] FAILED [ 53%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2] FAILED [ 55%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data3-messege3] FAILED [ 56%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data4-messege4] FAILED [ 57%]
tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed FAILED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user PASSED [ 61%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 63%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 65%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin PASSED [ 66%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_check_permission_admin FAILED [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 68%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 70%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 72%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete FAILED     [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genres_check_permission FAILED [ 76%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 78%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 80%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_name_length_validation PASSED [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_05_titles_check_permission PASSED [ 82%]
tests/test_04_title.py::Test04TitleAPI::test_06_titles_detail_put_not_allowed PASSED [ 83%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 85%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_post FAILED     [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get PASSED [ 87%]
tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user PASSED [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin PASSED [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_06_reviews_detail_put_not_allowed PASSED [ 91%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 93%]
tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get FAILED [ 95%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete FAILED [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator FAILED [ 97%]
tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_07_comment_detail_put_not_allowed FAILED [100%]

================================== FAILURES ===================================
___ Test00UserRegistration.test_get_new_confirmation_code_for_existing_user ___

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000015D7FBB43D0>
client = <django.test.client.Client object at 0x0000015D7FB7E2B0>

    def test_get_new_confirmation_code_for_existing_user(self, client):
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        response = client.post(self.URL_SIGNUP, data=valid_data)
        assert response.status_code == HTTPStatus.OK, (
            'ѕроверьте, что POST-запрос с корректными данными, отправленный '
            f'на эндпоинт `{self.URL_SIGNUP}`, возвращает ответ со статусом '
            '200.'
        )
    
        response = client.post(self.URL_SIGNUP, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'ѕроверьте, что повторный POST-запрос к `{self.URL_SIGNUP}` с '
            'данными зарегистрированного пользовател€ возвращает ответ со '
            'статусом 200.'
        )
E       AssertionError: ѕроверьте, что повторный POST-запрос к `/api/v1/auth/signup/` с данными зарегистрированного пользовател€ возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests\test_00_user_registration.py:351: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_get_confirmation_code_for_user_created_by_admin _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000015D7FC50EB0>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FC44700>
client = <django.test.client.Client object at 0x0000015D7FC44400>
django_user_model = <class 'users.models.YamdbUser'>

    def test_get_confirmation_code_for_user_created_by_admin(
            self, admin_client, client, django_user_model
    ):
        user_cnt = django_user_model.objects.count()
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        admin_client.post(self.URL_ADMIN_CREATE_USER, data=valid_data)
        assert (user_cnt + 1) == django_user_model.objects.count(), (
            '≈сли POST-запрос администратора на эндпоинт '
            f'`{self.URL_ADMIN_CREATE_USER}` содержит корректные данные - '
            'должен быть создан новый пользователь.'
        )
    
        response = client.post(self.URL_SIGNUP, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'ѕроверьте, что POST-запрос к {self.URL_SIGNUP} с данными '
            'пользовател€, созданного администратором,  возвращает ответ '
            'со статусом 200.'
        )
E       AssertionError: ѕроверьте, что POST-запрос к /api/v1/auth/signup/ с данными пользовател€, созданного администратором,  возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests\test_00_user_registration.py:373: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_____________________ Test01UserAPI.test_09_users_me_get ______________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D7FDA64C0>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FD5E7C0>
user = <YamdbUser: TestUser>

    def test_09_users_me_get(self, user_client, user):
        response = user_client.get(f'{self.USERS_ME_URL}')
>       assert response.status_code == HTTPStatus.OK, (
            'ѕроверьте, что GET-запрос обычного пользовател€ к '
            f'`{self.USERS_ME_URL}` возвращает ответ со статусом 200.'
        )
E       AssertionError: ѕроверьте, что GET-запрос обычного пользовател€ к `/api/v1/users/me/` возвращает ответ со статусом 200.
E       assert 403 == <HTTPStatus.OK: 200>
E         +403
E         -<HTTPStatus.OK: 200>

tests\test_01_users.py:477: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
____________ Test01UserAPI.test_09_02_users_me_delete_not_allowed _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D7FCFD460>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FBA90D0>
user = <YamdbUser: TestUser>
django_user_model = <class 'users.models.YamdbUser'>

    def test_09_02_users_me_delete_not_allowed(self, user_client, user,
                                               django_user_model):
        response = user_client.delete(f'{self.USERS_ME_URL}')
>       assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            f'ѕроверьте, что DELETE-запрос к `{self.USERS_ME_URL}` возвращает '
            'ответ со статусом 405.'
        )
E       AssertionError: ѕроверьте, что DELETE-запрос к `/api/v1/users/me/` возвращает ответ со статусом 405.
E       assert 403 == <HTTPStatus.METHOD_NOT_ALLOWED: 405>
E         +403
E         -<HTTPStatus.METHOD_NOT_ALLOWED: 405>

tests\test_01_users.py:495: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
___________________ Test01UserAPI.test_10_01_users_me_patch ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D7FD0F340>
django_user_model = <class 'users.models.YamdbUser'>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FD561C0>
admin = <YamdbUser: TestAdmin>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7FD6C7C0>
moderator = <YamdbUser: TestModerator>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FD6C1F0>
user = <YamdbUser: TestAdmin>

    def test_10_01_users_me_patch(self, django_user_model, admin_client,
                                  admin, moderator_client, moderator,
                                  user_client, user):
        data = {'bio': 'description'}
    
        for client, user in (
                (admin_client, admin),
                (moderator_client, moderator),
                (user_client, user)
        ):
            response = client.patch(f'{self.USERS_ME_URL}', data=data)
>           assert response.status_code == HTTPStatus.OK, (
                'ѕроверьте, что PATCH-запрос к '
                f'`{self.USERS_ME_URL}` доступен пользовател€м всех '
                'ролей и возвращает ответ со статусом 200.'
            )
E           AssertionError: ѕроверьте, что PATCH-запрос к `/api/v1/users/me/` доступен пользовател€м всех ролей и возвращает ответ со статусом 200.
E           assert 404 == <HTTPStatus.OK: 200>
E             +404
E             -<HTTPStatus.OK: 200>

tests\test_01_users.py:518: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data0-messege0] ____

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D7FD72940>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FDADC40>
data = {'email': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@yamdb.fake', 'username': 'valid-username'}
messege = ('ѕроверьте, что при обработке {request_method}-запроса к `{url}` провер€етс€ длина пол€ `email`: его содержимое не должно быть длиннее 254 символа.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: ѕроверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` провер€етс€ длина пол€ `email`: его содержимое не должно быть длиннее 254 символа.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data1-messege1] ____

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D7FDAD430>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FDD1400>
data = {'email': 'valid-email@yamdb.fake', 'username': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'}
messege = ('ѕроверьте, что при обработке {request_method}-запроса к `{url}` провер€етс€ длина пол€ `username`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: ѕроверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` провер€етс€ длина пол€ `username`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data2-messege2] ____

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D7FDD1AC0>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FDFC400>
data = {'email': 'valid-email@yamdb.fake', 'username': '|-|aTa|_|_|a'}
messege = ('ѕроверьте, что при обработке {request_method}-запроса к `{url}` содержание пол€ `username` провер€етс€ на соответствие паттерну, указанному в спецификации: ^[\\w.@+-]+\\Z',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: ѕроверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` содержание пол€ `username` провер€етс€ на соответствие паттерну, указанному в спецификации: ^[\w.@+-]+\Z
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data3-messege3] ____

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D7FC03850>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FDC8460>
data = {'email': 'valid-email@yamdb.fake', 'first_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('ѕроверьте, что при обработке POST-запроса к `{url}` провер€етс€ длина пол€ `first_name`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: ѕроверьте, что при обработке POST-запроса к `/api/v1/users/me/` провер€етс€ длина пол€ `first_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data4-messege4] ____

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D76682E50>
user_client = <rest_framework.test.APIClient object at 0x0000015D7658B940>
data = {'email': 'valid-email@yamdb.fake', 'last_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('ѕроверьте, что при обработке POST-запроса к `{url}` провер€етс€ длина пол€ `last_name`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: ѕроверьте, что при обработке POST-запроса к `/api/v1/users/me/` провер€етс€ длина пол€ `last_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
_______ Test01UserAPI.test_10_03_users_me_patch_change_role_not_allowed _______

self = <tests.test_01_users.Test01UserAPI object at 0x0000015D7FB90910>
user_client = <rest_framework.test.APIClient object at 0x0000015D76682310>
user = <YamdbUser: TestUser>
django_user_model = <class 'users.models.YamdbUser'>

    def test_10_03_users_me_patch_change_role_not_allowed(self,
                                                          user_client,
                                                          user,
                                                          django_user_model):
        response = user_client.patch(
            f'{self.USERS_ME_URL}', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.OK, (
            'ѕроверьте, что PATCH-запрос пользовател€ с ролью `user` к '
            f'`{self.USERS_ME_URL}` возвращает ответ со статусом 200.'
        )
E       AssertionError: ѕроверьте, что PATCH-запрос пользовател€ с ролью `user` к `/api/v1/users/me/` возвращает ответ со статусом 200.
E       assert 403 == <HTTPStatus.OK: 200>
E         +403
E         -<HTTPStatus.OK: 200>

tests\test_01_users.py:552: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
__________ Test02CategoryAPI.test_05_category_check_permission_admin __________

self = <tests.test_02_category.Test02CategoryAPI object at 0x0000015D7FC171C0>
client = <django.test.client.Client object at 0x0000015D765DBBE0>
user_client = <rest_framework.test.APIClient object at 0x0000015D76602BB0>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D76602EB0>
admin_client = <rest_framework.test.APIClient object at 0x0000015D76602220>

    def test_05_category_check_permission_admin(self, client,
                                                user_client,
                                                moderator_client,
                                                admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'ћузыка',
            'slug': 'music'
        }
        check_permissions(client, self.CATEGORY_URL, data,
                          'неавторизованного пользовател€',
                          categories, HTTPStatus.UNAUTHORIZED)
>       check_permissions(user_client, self.CATEGORY_URL, data,
                          'пользовател€ с ролью `user`', categories,
                          HTTPStatus.FORBIDDEN)

tests\test_02_category.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000015D76602BB0>
url = '/api/v1/categories/', data = {'name': 'ћузыка', 'slug': 'music'}
user_role = 'пользовател€ с ролью `user`'
objects = [{'name': '‘ильм', 'slug': 'films'}, {'name': ' ниги', 'slug': 'books'}]
expected_status = <HTTPStatus.FORBIDDEN: 403>

    def check_permissions(client, url, data, user_role, objects,
                          expected_status):
        sufix = 'slug' if 'slug' in objects[0] else 'id'
    
        response = client.post(url, data=data)
        assert response.status_code == expected_status, (
            f'ѕроверьте, что POST-запрос {user_role} к `{url}` возвращает ответ '
            f'со статусом {expected_status}.'
        )
        response = client.patch(f'{url}{objects[0][sufix]}/', data=data)
>       assert response.status_code == expected_status, (
            f'ѕроверьте, что PATCH-запрос {user_role} к `{url}<{sufix}>/` '
            f'возвращает ответ со статусом {expected_status}.'
        )
E       AssertionError: ѕроверьте, что PATCH-запрос пользовател€ с ролью `user` к `/api/v1/categories/<slug>/` возвращает ответ со статусом 403.

tests\utils.py:142: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/categories/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/categories/films/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/categories/films/
WARNING  django.request:log.py:224 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/categories/films/
____________________ Test03GenreAPI.test_04_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x0000015D7FC55A00>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FB857F0>

    def test_04_genres_delete(self, admin_client):
        genres = create_genre(admin_client)
        response = admin_client.delete(
            self.GENRES_SLUG_TEMPLATE_URL.format(slug=genres[0]['slug'])
        )
        assert response.status_code == HTTPStatus.NO_CONTENT, (
            'ѕроверьте, что DELETE-запрос администратора к '
            f'`{self.GENRES_SLUG_TEMPLATE_URL}` возвращает ответ со  статусом '
            '204.'
        )
        response = admin_client.get(self.GENRES_URL)
        test_data = response.json()['results']
        assert len(test_data) == len(genres) - 1, (
            'ѕроверьте, что DELETE-запрос администратора к '
            f'`{self.GENRES_SLUG_TEMPLATE_URL}` удал€ет жанр из Ѕƒ.'
        )
        response = admin_client.get(
            self.GENRES_SLUG_TEMPLATE_URL.format(slug=genres[0]['slug'])
        )
>       assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            'ѕроверьте, что GET-запрос администратора к '
            f'`{self.GENRES_SLUG_TEMPLATE_URL}` возвращает ответ со статусом '
            '405.'
        )
E       AssertionError: ѕроверьте, что GET-запрос администратора к `/api/v1/genres/{slug}/` возвращает ответ со статусом 405.
E       assert 404 == <HTTPStatus.METHOD_NOT_ALLOWED: 405>
E         +404
E         -<HTTPStatus.METHOD_NOT_ALLOWED: 405>

tests\test_03_genre.py:108: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/genres/horror/
_______________ Test03GenreAPI.test_05_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x0000015D7FB85E50>
client = <django.test.client.Client object at 0x0000015D7FD08EE0>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FD08DC0>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7FD08BB0>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FD081F0>

    def test_05_genres_check_permission(self, client,
                                        user_client,
                                        moderator_client,
                                        admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Ѕоевик',
            'slug': 'action'
        }
        check_permissions(client, self.GENRES_URL, data,
                          'неавторизованного пользовател€',
                          genres, HTTPStatus.UNAUTHORIZED)
>       check_permissions(user_client, self.GENRES_URL, data,
                          'пользовател€ с ролью `user`', genres,
                          HTTPStatus.FORBIDDEN)

tests\test_03_genre.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000015D7FD08DC0>
url = '/api/v1/genres/', data = {'name': 'Ѕоевик', 'slug': 'action'}
user_role = 'пользовател€ с ролью `user`'
objects = [{'name': '”жасы', 'slug': 'horror'}, {'name': ' омеди€', 'slug': 'comedy'}, {'name': 'ƒрама', 'slug': 'drama'}]
expected_status = <HTTPStatus.FORBIDDEN: 403>

    def check_permissions(client, url, data, user_role, objects,
                          expected_status):
        sufix = 'slug' if 'slug' in objects[0] else 'id'
    
        response = client.post(url, data=data)
        assert response.status_code == expected_status, (
            f'ѕроверьте, что POST-запрос {user_role} к `{url}` возвращает ответ '
            f'со статусом {expected_status}.'
        )
        response = client.patch(f'{url}{objects[0][sufix]}/', data=data)
>       assert response.status_code == expected_status, (
            f'ѕроверьте, что PATCH-запрос {user_role} к `{url}<{sufix}>/` '
            f'возвращает ответ со статусом {expected_status}.'
        )
E       AssertionError: ѕроверьте, что PATCH-запрос пользовател€ с ролью `user` к `/api/v1/genres/<slug>/` возвращает ответ со статусом 403.

tests\utils.py:142: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/genres/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/genres/horror/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/genres/horror/
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/genres/horror/
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x0000015D7FD72FA0>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FCE4100>
client = <django.test.client.Client object at 0x0000015D7FDFCC40>

    def test_02_title_admin(self, admin_client, client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        title_count = 0
    
        assert_msg = (
            f'≈сли POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит некорректные данные - должен вернутьс€ ответ со '
            'статусом 400.'
        )
        data = {}
        response = admin_client.post(self.TITLES_URL, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, assert_msg
    
        invalid_data = {
            'name': '”гнать за 60 секунд',
            'year': 'дветыщи',
            'genre': [genres[1]['slug']],
            'category': categories[1]['slug'],
            'description': '”гон€л машины всю ночь и немного подустал.'
        }
        response = admin_client.post(self.TITLES_URL, data=invalid_data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, assert_msg
    
        post_data_1 = {
            'name': 'ћост через реку  вай',
            'year': 1957,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': '–он —вонсон рекомендует.'
        }
        response = admin_client.post(self.TITLES_URL, data=post_data_1)
        assert response.status_code == HTTPStatus.CREATED, (
            f'≈сли POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит корректные данные - должен вернутьс€ ответ со статусом '
            '201.'
        )
        title_count += 1
    
        post_data_2 = {
            'name': '’ороший, плохой, злой.',
            'year': 1966,
            'genre': [genres[2]['slug']],
            'category': categories[1]['slug'],
            'description': '”гадай ревьюера по названию фильма.'
        }
        response = admin_client.post(self.TITLES_URL, data=post_data_2)
        assert response.status_code == HTTPStatus.CREATED, (
            f'≈сли POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит корректные данные - должен вернутьс€ ответ со статусом '
            '201.'
        )
        title_count += 1
        assert isinstance(response.json().get('id'), int), (
            'ѕроверьте, при POST-запросе администратора к '
            f'`{self.TITLES_URL}` в ответе возвращаютс€ данные созданного '
            'объекта. —ейчас поле `id` отсутствует или не €вл€етс€ целым '
            'числом.'
        )
    
        response = client.get(self.TITLES_URL)
        assert response.status_code == HTTPStatus.OK, (
            'ѕроверьте, что GET-запрос неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` возвращает ответ со статусом 200.'
        )
        data = response.json()
        check_pagination(self.TITLES_URL, data, title_count)
    
        expected_title_names = {post_data_1['name'], post_data_2['name']}
        title_names = {element.get('name') for element in data['results']}
        assert len(expected_title_names.intersection(title_names)) == 2, (
            f'ѕроверьте, что дл€ эндпоинта `{self.TITLES_URL}` настроена '
            'пагинаци€. —ейчас значение параметра `results` отсутствует или '
            'содержит некорректную информацию о существующих объектах.'
        )
    
        for element in data['results']:
            if element['name'] == post_data_1['name']:
                title = element
    
        assert title.get('rating') is None, (
            'ѕроверьте, что при GET-запросе неавторизованного '
            f'пользовател€ к `{self.TITLES_URL}` возвращаетс€ информаци€ о '
            'рейтинге произведений. ≈сли отзывов о произведении нет - '
            'значением пол€ `rating` должено быть `None`.'
        )
        assert title.get('category') == categories[0], (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержитс€ информаци€ о категори€х '
            'произведений. —ейчас поле `category` дл€ элементов списка '
            '`results` отсутствует или содержит некорректное значение.'
        )
    
        title_genres = title.get('genre', [])
        assert genres[0] in title_genres and genres[1] in title_genres, (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержитс€ список жанров дл€ '
            'каждого произведени€. —ейчас поле `genres` дл€ элементов списка '
            '`results` отсутствует или содержит некорректное значение.'
        )
        assert title.get('year') == post_data_1['year'], (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержитс€ год выхода '
            'произведений. —ейчас поле `year` дл€ элементов списка `results` '
            'отсутствует или содержит некорректное значение.'
        )
        assert title.get('description') == post_data_1['description'], (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержатс€ описани€ произведений. '
            '—ейчас поле `description` дл€ элементов списка `results` '
            'отсутствует или содержит некорректное значение.'
        )
    
        assert isinstance(title.get('id'), int), (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержатс€ `id` произведений. '
            '—ейчас поле `id` дл€ элементов списка `results` отсутствует или '
            'его значение не €вл€етс€ целым числом.'
        )
    
        data = {
            'name': '“итаник',
            'year': 1997,
            'genre': [genres[1]['slug']],
            'category': categories[1]['slug'],
            'description': 'ƒверь выдержала бы и двоих...'
        }
        admin_client.post(self.TITLES_URL, data=data)
    
        response = admin_client.get(
            f'{self.TITLES_URL}?genre={genres[1]["slug"]}'
        )
        data = response.json()
>       assert len(data['results']) == 2, (
            f'ѕроверьте, что дл€ эндпоинта `{self.TITLES_URL}` реализована '
            'возможность фильтрации по полю `genre` с использованием '
            'параметра `slug` жанра.'
        )
E       AssertionError: ѕроверьте, что дл€ эндпоинта `/api/v1/titles/` реализована возможность фильтрации по полю `genre` с использованием параметра `slug` жанра.
E       assert 3 == 2
E         +3
E         -2

tests\test_04_title.py:161: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_____________________ Test05ReviewAPI.test_02_review_post _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000015D7FC22BE0>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FDAD250>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FDD10A0>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7FD98820>
admin = <YamdbUser: TestAdmin>

    def test_02_review_post(self, admin_client, user_client,
                            moderator_client, admin):
        titles, _, _ = create_titles(admin_client)
        title_0_reviews_count = 0
        first_title_reviews_url = self.REVIEWS_URL_TEMPLATE.format(
            title_id=titles[0]['id']
        )
        second_title_reviews_url = self.REVIEWS_URL_TEMPLATE.format(
            title_id=titles[1]['id']
        )
    
        data = {}
        response = user_client.post(first_title_reviews_url, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            '≈сли POST-запрос авторизованного пользовател€ к '
            f'`{self.REVIEWS_URL_TEMPLATE}` содержит некорректные данные - '
            'должен вернутьс€ ответ со статусом 400.'
        )
    
        post_data = {
            'text': 'Ќеочень',
            'score': 5
        }
        create_single_review(
            admin_client,
            titles[0]['id'],
            post_data['text'],
            post_data['score']
        )
        title_0_reviews_count += 1
    
        data = {
            'text': 'Ўл€па',
            'score': 1
        }
        response = admin_client.post(first_title_reviews_url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'ѕроверьте, что при попытке пользовател€ создать второй отзыв на '
            'одно и то же произведение POST-запрос к '
            f'`{self.REVIEWS_URL_TEMPLATE}` вернЄт ответ со статусом 400.'
        )
E       AssertionError: ѕроверьте, что при попытке пользовател€ создать второй отзыв на одно и то же произведение POST-запрос к `/api/v1/titles/{title_id}/reviews/` вернЄт ответ со статусом 400.
E       assert 201 == <HTTPStatus.BAD_REQUEST: 400>
E         +201
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_05_review.py:111: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/13/reviews/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000015D7FCF7940>
client = <django.test.client.Client object at 0x0000015D7FD9F820>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FD44370>
admin = <YamdbUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FD65BB0>
user = <YamdbUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7FD652B0>
moderator = <YamdbUser: TestModerator>

    def test_01_comment_not_auth(self, client, admin_client, admin,
                                 user_client, user, moderator_client,
                                 moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        reviews, titles = create_reviews(admin_client, author_map)
    
        response = client.get(
            self.COMMENTS_URL_TEMPLATE.format(
                title_id=titles[0]['id'],
                review_id=reviews[0]['id']
            )
        )
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Ёндпоинт `{self.COMMENTS_URL_TEMPLATE}` не найден. ѕроверьте '
            'настрокий в *urls.py*.'
        )
E       AssertionError: Ёндпоинт `/api/v1/titles/{title_id}/reviews/{review_id}/comments/` не найден. ѕроверьте настрокий в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_06_comment.py:34: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/23/reviews/18/comments/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000015D7FD44AC0>
admin_client = <rest_framework.test.APIClient object at 0x0000015D765E9820>
admin = <YamdbUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FB976A0>
user = <YamdbUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7FB97220>
moderator = <YamdbUser: TestModerator>

    def test_02_comment(self, admin_client, admin, user_client, user,
                        moderator_client, moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        reviews, titles = create_reviews(admin_client, author_map)
        first_review_comment_cnt = 0
    
        data = {}
        response = user_client.post(
            self.COMMENTS_URL_TEMPLATE.format(
                title_id=titles[0]['id'],
                review_id=reviews[0]['id']
            ),
            data=data
        )
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            '≈сли POST-запрос пользовател€ с ролью `user` к '
            f'`{self.COMMENTS_URL_TEMPLATE}` содержит некорректные данные - '
            'должен вернутьс€ ответ со статусом 400.'
        )
E       AssertionError: ≈сли POST-запрос пользовател€ с ролью `user` к `/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит некорректные данные - должен вернутьс€ ответ со статусом 400.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_06_comment.py:61: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/25/reviews/21/comments/
_________________ Test06CommentAPI.test_03_comment_detail_get _________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000015D765E9430>
client = <django.test.client.Client object at 0x0000015D7FDA6460>
admin_client = <rest_framework.test.APIClient object at 0x0000015D766558B0>
admin = <YamdbUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FD32A90>
user = <YamdbUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7FD32490>
moderator = <YamdbUser: TestModerator>

    def test_03_comment_detail_get(self, client, admin_client, admin,
                                   user_client, user, moderator_client,
                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000015D766558B0>
title_id = 27, review_id = 24, text = 'comment number 1'

    def create_single_comment(client, title_id, review_id, text):
        data = {'text': text}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/{review_id}/comments/',
            data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            '≈сли POST-запрос авторизованного пользовател€ к '
            '`/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит '
            'корректные данные - должен вернутьс€ ответ со статусом 201.'
        )
E       AssertionError: ≈сли POST-запрос авторизованного пользовател€ к `/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит корректные данные - должен вернутьс€ ответ со статусом 201.

tests\utils.py:172: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/27/reviews/24/comments/
_________ Test06CommentAPI.test_04_comment_detail__user_patch_delete __________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000015D76559760>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7669D550>
admin = <YamdbUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FDA6EE0>
user = <YamdbUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7FDA6430>
moderator = <YamdbUser: TestModerator>

    def test_04_comment_detail__user_patch_delete(self, admin_client, admin,
                                                  user_client, user,
                                                  moderator_client,
                                                  moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000015D7669D550>
title_id = 29, review_id = 27, text = 'comment number 1'

    def create_single_comment(client, title_id, review_id, text):
        data = {'text': text}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/{review_id}/comments/',
            data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            '≈сли POST-запрос авторизованного пользовател€ к '
            '`/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит '
            'корректные данные - должен вернутьс€ ответ со статусом 201.'
        )
E       AssertionError: ≈сли POST-запрос авторизованного пользовател€ к `/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит корректные данные - должен вернутьс€ ответ со статусом 201.

tests\utils.py:172: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/29/reviews/27/comments/
_________ Test06CommentAPI.test_05_comment_detail_admin_and_moderator _________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000015D75D87610>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7667C430>
admin = <YamdbUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000015D765EA250>
user = <YamdbUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D765EA130>
moderator = <YamdbUser: TestModerator>

    def test_05_comment_detail_admin_and_moderator(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000015D7667C430>
title_id = 31, review_id = 30, text = 'comment number 1'

    def create_single_comment(client, title_id, review_id, text):
        data = {'text': text}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/{review_id}/comments/',
            data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            '≈сли POST-запрос авторизованного пользовател€ к '
            '`/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит '
            'корректные данные - должен вернутьс€ ответ со статусом 201.'
        )
E       AssertionError: ≈сли POST-запрос авторизованного пользовател€ к `/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит корректные данные - должен вернутьс€ ответ со статусом 201.

tests\utils.py:172: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/31/reviews/30/comments/
______________ Test06CommentAPI.test_06_comment_detail_not_auth _______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000015D7667CDC0>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FD27C40>
admin = <YamdbUser: TestAdmin>
client = <django.test.client.Client object at 0x0000015D7658B820>
user_client = <rest_framework.test.APIClient object at 0x0000015D7658B8E0>
user = <YamdbUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7658BBE0>
moderator = <YamdbUser: TestModerator>

    def test_06_comment_detail_not_auth(self, admin_client, admin, client,
                                        user_client, user, moderator_client,
                                        moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000015D7FD27C40>
title_id = 33, review_id = 33, text = 'comment number 1'

    def create_single_comment(client, title_id, review_id, text):
        data = {'text': text}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/{review_id}/comments/',
            data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            '≈сли POST-запрос авторизованного пользовател€ к '
            '`/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит '
            'корректные данные - должен вернутьс€ ответ со статусом 201.'
        )
E       AssertionError: ≈сли POST-запрос авторизованного пользовател€ к `/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит корректные данные - должен вернутьс€ ответ со статусом 201.

tests\utils.py:172: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/33/reviews/33/comments/
___________ Test06CommentAPI.test_07_comment_detail_put_not_allowed ___________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000015D7658B880>
admin_client = <rest_framework.test.APIClient object at 0x0000015D7FD9F9A0>
admin = <YamdbUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000015D7FC2F5E0>
user = <YamdbUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000015D7FDB7610>
moderator = <YamdbUser: TestModerator>

    def test_07_comment_detail_put_not_allowed(
            self, admin_client, admin, user_client, user, moderator_client,
            moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000015D7FD9F9A0>
title_id = 35, review_id = 36, text = 'comment number 1'

    def create_single_comment(client, title_id, review_id, text):
        data = {'text': text}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/{review_id}/comments/',
            data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            '≈сли POST-запрос авторизованного пользовател€ к '
            '`/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит '
            'корректные данные - должен вернутьс€ ответ со статусом 201.'
        )
E       AssertionError: ≈сли POST-запрос авторизованного пользовател€ к `/api/v1/titles/{title_id}/reviews/{review_id}/comments/` содержит корректные данные - должен вернутьс€ ответ со статусом 201.

tests\utils.py:172: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/35/reviews/36/comments/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
============================== warnings summary ===============================
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user
tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin
  f:\Python\_Dev\api_yamdb\.venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Category'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth
tests/test_03_genre.py::Test03GenreAPI::test_02_genre
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete
  f:\Python\_Dev\api_yamdb\.venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Genre'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail
  f:\Python\_Dev\api_yamdb\.venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Title'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth
tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user
tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin
  f:\Python\_Dev\api_yamdb\.venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Review'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_me_get - Assertio...
FAILED tests/test_01_users.py::Test01UserAPI::test_09_02_users_me_delete_not_allowed
FAILED tests/test_01_users.py::Test01UserAPI::test_10_01_users_me_patch - Ass...
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data0-messege0]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data1-messege1]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data3-messege3]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data4-messege4]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed
FAILED tests/test_02_category.py::Test02CategoryAPI::test_05_category_check_permission_admin
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete - Assert...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_05_genres_check_permission
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_post - Assert...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - Assertio...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete
FAILED tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator
FAILED tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_07_comment_detail_put_not_allowed
================= 23 failed, 57 passed, 12 warnings in 26.01s =================
