============================= test session starts =============================
platform win32 -- Python 3.9.0, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- f:\Python\_Dev\api_yamdb\.venv\Scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: F:\Python\_Dev\api_yamdb\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: pythonpath-0.7.3, django-4.4.0
collecting ... collected 80 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  2%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0] PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data1-messege1] PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2] PASSED [  6%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  8%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0] PASSED [ 10%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1] PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2] PASSED [ 12%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3] PASSED [ 13%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4] PASSED [ 15%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [ 16%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 17%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 18%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user FAILED [ 20%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin FAILED [ 21%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 23%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 25%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 26%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 27%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-] PASSED [ 31%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указани€ роли нового пользовател€ ] PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 36%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 38%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 40%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_not_allowed PASSED [ 42%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 46%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_me_get PASSED       [ 48%]
tests/test_01_users.py::Test01UserAPI::test_09_02_users_me_delete_not_allowed PASSED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_10_01_users_me_patch PASSED  [ 51%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data0-messege0] PASSED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data1-messege1] PASSED [ 53%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2] PASSED [ 55%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data3-messege3] PASSED [ 56%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data4-messege4] PASSED [ 57%]
tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user PASSED [ 61%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 63%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 65%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin PASSED [ 66%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_check_permission_admin PASSED [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 68%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 70%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 72%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete PASSED     [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genres_check_permission PASSED [ 76%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 78%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 80%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_name_length_validation PASSED [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_05_titles_check_permission PASSED [ 82%]
tests/test_04_title.py::Test04TitleAPI::test_06_titles_detail_put_not_allowed PASSED [ 83%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 85%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_post PASSED     [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get PASSED [ 87%]
tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user FAILED [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin FAILED [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_06_reviews_detail_put_not_allowed PASSED [ 91%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth PASSED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment PASSED       [ 93%]
tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get PASSED [ 95%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete PASSED [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator PASSED [ 97%]
tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth PASSED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_07_comment_detail_put_not_allowed PASSED [100%]

================================== FAILURES ===================================
___ Test00UserRegistration.test_get_new_confirmation_code_for_existing_user ___

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000002294D13E6A0>
client = <django.test.client.Client object at 0x000002294D17ADF0>

    def test_get_new_confirmation_code_for_existing_user(self, client):
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        response = client.post(self.URL_SIGNUP, data=valid_data)
        assert response.status_code == HTTPStatus.OK, (
            'ѕроверьте, что POST-запрос с корректными данными, отправленный '
            f'на эндпоинт `{self.URL_SIGNUP}`, возвращает ответ со статусом '
            '200.'
        )
    
        response = client.post(self.URL_SIGNUP, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'ѕроверьте, что повторный POST-запрос к `{self.URL_SIGNUP}` с '
            'данными зарегистрированного пользовател€ возвращает ответ со '
            'статусом 200.'
        )
E       AssertionError: ѕроверьте, что повторный POST-запрос к `/api/v1/auth/signup/` с данными зарегистрированного пользовател€ возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests\test_00_user_registration.py:351: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_get_confirmation_code_for_user_created_by_admin _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000002294D0F0970>
admin_client = <rest_framework.test.APIClient object at 0x000002294D202760>
client = <django.test.client.Client object at 0x000002294D202910>
django_user_model = <class 'users.models.YamdbUser'>

    def test_get_confirmation_code_for_user_created_by_admin(
            self, admin_client, client, django_user_model
    ):
        user_cnt = django_user_model.objects.count()
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        admin_client.post(self.URL_ADMIN_CREATE_USER, data=valid_data)
        assert (user_cnt + 1) == django_user_model.objects.count(), (
            '≈сли POST-запрос администратора на эндпоинт '
            f'`{self.URL_ADMIN_CREATE_USER}` содержит корректные данные - '
            'должен быть создан новый пользователь.'
        )
    
        response = client.post(self.URL_SIGNUP, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'ѕроверьте, что POST-запрос к {self.URL_SIGNUP} с данными '
            'пользовател€, созданного администратором,  возвращает ответ '
            'со статусом 200.'
        )
E       AssertionError: ѕроверьте, что POST-запрос к /api/v1/auth/signup/ с данными пользовател€, созданного администратором,  возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests\test_00_user_registration.py:373: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x000002294D349850>
admin_client = <rest_framework.test.APIClient object at 0x000002294D0BC700>
client = <django.test.client.Client object at 0x000002294D17ADC0>

    def test_02_title_admin(self, admin_client, client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        title_count = 0
    
        assert_msg = (
            f'≈сли POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит некорректные данные - должен вернутьс€ ответ со '
            'статусом 400.'
        )
        data = {}
        response = admin_client.post(self.TITLES_URL, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, assert_msg
    
        invalid_data = {
            'name': '”гнать за 60 секунд',
            'year': 'дветыщи',
            'genre': [genres[1]['slug']],
            'category': categories[1]['slug'],
            'description': '”гон€л машины всю ночь и немного подустал.'
        }
        response = admin_client.post(self.TITLES_URL, data=invalid_data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, assert_msg
    
        post_data_1 = {
            'name': 'ћост через реку  вай',
            'year': 1957,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': '–он —вонсон рекомендует.'
        }
        response = admin_client.post(self.TITLES_URL, data=post_data_1)
        assert response.status_code == HTTPStatus.CREATED, (
            f'≈сли POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит корректные данные - должен вернутьс€ ответ со статусом '
            '201.'
        )
        title_count += 1
    
        post_data_2 = {
            'name': '’ороший, плохой, злой.',
            'year': 1966,
            'genre': [genres[2]['slug']],
            'category': categories[1]['slug'],
            'description': '”гадай ревьюера по названию фильма.'
        }
        response = admin_client.post(self.TITLES_URL, data=post_data_2)
        assert response.status_code == HTTPStatus.CREATED, (
            f'≈сли POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит корректные данные - должен вернутьс€ ответ со статусом '
            '201.'
        )
        title_count += 1
        assert isinstance(response.json().get('id'), int), (
            'ѕроверьте, при POST-запросе администратора к '
            f'`{self.TITLES_URL}` в ответе возвращаютс€ данные созданного '
            'объекта. —ейчас поле `id` отсутствует или не €вл€етс€ целым '
            'числом.'
        )
    
        response = client.get(self.TITLES_URL)
        assert response.status_code == HTTPStatus.OK, (
            'ѕроверьте, что GET-запрос неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` возвращает ответ со статусом 200.'
        )
        data = response.json()
        check_pagination(self.TITLES_URL, data, title_count)
    
        expected_title_names = {post_data_1['name'], post_data_2['name']}
        title_names = {element.get('name') for element in data['results']}
        assert len(expected_title_names.intersection(title_names)) == 2, (
            f'ѕроверьте, что дл€ эндпоинта `{self.TITLES_URL}` настроена '
            'пагинаци€. —ейчас значение параметра `results` отсутствует или '
            'содержит некорректную информацию о существующих объектах.'
        )
    
        for element in data['results']:
            if element['name'] == post_data_1['name']:
                title = element
    
        assert title.get('rating') is None, (
            'ѕроверьте, что при GET-запросе неавторизованного '
            f'пользовател€ к `{self.TITLES_URL}` возвращаетс€ информаци€ о '
            'рейтинге произведений. ≈сли отзывов о произведении нет - '
            'значением пол€ `rating` должено быть `None`.'
        )
        assert title.get('category') == categories[0], (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержитс€ информаци€ о категори€х '
            'произведений. —ейчас поле `category` дл€ элементов списка '
            '`results` отсутствует или содержит некорректное значение.'
        )
    
        title_genres = title.get('genre', [])
        assert genres[0] in title_genres and genres[1] in title_genres, (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержитс€ список жанров дл€ '
            'каждого произведени€. —ейчас поле `genres` дл€ элементов списка '
            '`results` отсутствует или содержит некорректное значение.'
        )
        assert title.get('year') == post_data_1['year'], (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержитс€ год выхода '
            'произведений. —ейчас поле `year` дл€ элементов списка `results` '
            'отсутствует или содержит некорректное значение.'
        )
        assert title.get('description') == post_data_1['description'], (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержатс€ описани€ произведений. '
            '—ейчас поле `description` дл€ элементов списка `results` '
            'отсутствует или содержит некорректное значение.'
        )
    
        assert isinstance(title.get('id'), int), (
            'ѕроверьте, что при GET-запросе неавторизованного пользовател€ к '
            f'`{self.TITLES_URL}` в ответе содержатс€ `id` произведений. '
            '—ейчас поле `id` дл€ элементов списка `results` отсутствует или '
            'его значение не €вл€етс€ целым числом.'
        )
    
        data = {
            'name': '“итаник',
            'year': 1997,
            'genre': [genres[1]['slug']],
            'category': categories[1]['slug'],
            'description': 'ƒверь выдержала бы и двоих...'
        }
        admin_client.post(self.TITLES_URL, data=data)
    
        response = admin_client.get(
            f'{self.TITLES_URL}?genre={genres[1]["slug"]}'
        )
        data = response.json()
>       assert len(data['results']) == 2, (
            f'ѕроверьте, что дл€ эндпоинта `{self.TITLES_URL}` реализована '
            'возможность фильтрации по полю `genre` с использованием '
            'параметра `slug` жанра.'
        )
E       AssertionError: ѕроверьте, что дл€ эндпоинта `/api/v1/titles/` реализована возможность фильтрации по полю `genre` с использованием параметра `slug` жанра.
E       assert 3 == 2
E         +3
E         -2

tests\test_04_title.py:161: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_________________ Test05ReviewAPI.test_04_review_detail_user __________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000002294D16A220>
admin_client = <rest_framework.test.APIClient object at 0x000002291DAAB880>
admin = <YamdbUser: TestAdmin>, user = <YamdbUser: TestUser>
user_client = <rest_framework.test.APIClient object at 0x000002291DAB7DF0>
moderator = <YamdbUser: TestModerator>
moderator_client = <rest_framework.test.APIClient object at 0x000002291DAB74F0>

    def test_04_review_detail_user(self, admin_client, admin, user,
                                   user_client, moderator, moderator_client):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        reviews, titles = create_reviews(admin_client, author_map)
        new_data = {
            'text': 'Top score',
            'score': 10
        }
        user_review_url = self.REVIEW_DETAIL_URL_TEMPLATE.format(
            title_id=titles[0]['id'], review_id=reviews[1]['id']
        )
    
        response = user_client.patch(user_review_url, data=new_data)
>       assert response.status_code == HTTPStatus.OK, (
            'ѕроверьте, что PATCH-запрос пользовател€ с ролью `user` к его '
            f'собственному отзыву через `{self.REVIEW_DETAIL_URL_TEMPLATE}` '
            'возвращает ответ со статусом 200.'
        )
E       AssertionError: ѕроверьте, что PATCH-запрос пользовател€ с ролью `user` к его собственному отзыву через `/api/v1/titles/{title_id}/reviews/{review_id}/` возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests\test_05_review.py:276: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/17/reviews/11/
_________ Test05ReviewAPI.test_05_reviews_detail_moderator_and_admin __________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000002294D2C15E0>
admin_client = <rest_framework.test.APIClient object at 0x000002291DA99E20>
admin = <YamdbUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x000002294D2E3C40>
user = <YamdbUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x000002294D2E3130>
moderator = <YamdbUser: TestModerator>

    def test_05_reviews_detail_moderator_and_admin(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        reviews, titles = create_reviews(admin_client, author_map)
        new_data = {
            'text': 'Top score',
            'score': 10
        }
    
        for idx, (client, role) in enumerate((
                (moderator_client, 'модератора'),
                (admin_client, 'администратора')
        ), 1):
            response = client.patch(
                self.REVIEW_DETAIL_URL_TEMPLATE.format(
                    title_id=titles[0]['id'], review_id=reviews[idx]['id']
                ),
                data=new_data
            )
>           assert response.status_code == HTTPStatus.OK, (
                f'ѕроверьте, что PATCH-запросе {role} к  чужому отзыву через '
                f'`{self.REVIEW_DETAIL_URL_TEMPLATE}` возвращает ответ со '
                'статусом 200.'
            )
E           AssertionError: ѕроверьте, что PATCH-запросе модератора к  чужому отзыву через `/api/v1/titles/{title_id}/reviews/{review_id}/` возвращает ответ со статусом 200.
E           assert 400 == <HTTPStatus.OK: 200>
E             +400
E             -<HTTPStatus.OK: 200>

tests\test_05_review.py:370: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/19/reviews/14/
=========================== short test summary info ===========================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user
FAILED tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin
======================== 5 failed, 75 passed in 25.15s ========================
